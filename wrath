#!/bin/bash
# ------------------------------------------------------------------
#         Anna Farre Orteu, 2022
#             af658@cam.ac.uk
#     Script to detect SVs from haplotagging data
# ------------------------------------------------------------------

bold=$(tput bold)
normal=$(tput sgr0)

subject=wrath
usage="
${bold}Wrath: wrapped analysis of tagged haplotypes

${bold}DESCRIPTION:
${normal} Program produces a jaccard matrix camparing the barcode content between all pairs windows whithin a chromosome.

wrath.sh [-h] [-g FASTAFILE] [-c CHROMOSOMENAME] [-w WINDOWSIZE] [-a FILELIST] [-t THREADS] [-p] [-v] [-x STEP] [-l] [-s START] [-e END]

${bold}OPTIONS: ${normal}
  -h                show this help text
  -g FASTAFILE      reference genome
  -c CHROMOSOMENAME chromosome
  -w WINDOWSIZE     window size
  -a FILELIST       list of bam files with paths of the individuals of the population/phenotype of interest
  -t THREADS        threads to use
  -p                skip plotting the heatmap
  -x STEP           start from a given step. Note that this only works if filenames match those expected by wrath. Possible step options are: makewindows, getbarcodes, matrix, outliers (only if -l given) or plot
  -l                automatic detection of SVs
  -v                verbose (only for the matrix generating step)
  -s START          start position to subset windows
  -e END            end position to subset windows

"


# --- Option processing --------------------------------------------
if [ $# == 0 ] ; then
    echo "$usage"
    exit 1;
fi
while getopts "g:c:w:a:t:pvx:le:s:h" optname
  do
    case "$optname" in
      "g") genome="$OPTARG" ;;
      "c") chromosome="$OPTARG" ;;
      "w") winSize="${OPTARG}" ;;
      "a") group="$OPTARG" ;;
      "t") threads="${OPTARG}" ;;
      "p") noplot=1 ;;
      "v") verbose="--verbose" ;;
      "x") step="$OPTARG" ;;
      "l") autodetect=1 ;;
      "e") end="$OPTARG" ;;
      "s") start="$OPTARG" ;;
      "h")
        echo "$usage"
        exit 0;
        ;;
      "?")
        >&2 echo "Unknown option $OPTARG"
        exit 1;
        ;;
      ":")
        >&2 echo "No argument value for option $OPTARG"
        exit 1;
        ;;
      *)
        >&2 echo "Unknown error while processing options"
        exit 1;
        ;;
    esac
  done

if [ $OPTIND -eq 1 ]; then
  printf "\nNo options were passed
  $usage"
  exit 1;
fi

shift $(($OPTIND - 1))

#if unset, set window size to 50kb
if [ -z ${winSize+x} ]; then
  winSize=50000
fi

#if unset, set number of threads to 1
if [ -z ${threads+x} ]; then
  threads=1
fi

if [ ! -z "$step" ]
then
    case $step in
        makewindows) makewindows=1 ;;
        getbarcodes) getbarcodes=1 ;;
        matrix) matrix=1 ;;
        outliers) outliersStep=1 ;;
        plot) plot=1 ;;
        *) echo "Wrong step specified!"
        echo "$usage"
        exit 1
    esac
fi


# -----------------------------------------------------------------
#  SCRIPT LOGIC GOES HERE
# -----------------------------------------------------------------

echo "running wrath_out with options:

genome = ${genome}
chromosome = ${chromosome}
window size = ${winSize}
sample bams file = ${group}
threads = ${threads}

"
######################################################################
# Set working paths

#Get the directory where the scipt is saved
#the code resolves symlinks
SOURCE=${BASH_SOURCE[0]}
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "$SOURCE")
  [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )


######################################################################
# Modules
#create the output directory (if it doesn't exist)
mkdir -p wrath_out


######################################################################
# Make genomic windows

if [ -z ${step+x} ] || [ ! -z ${makewindows+x} ]; then

  mkdir -p wrath_out/beds
  #check if the file with genome sizes already exists
  if [ ! -f wrath_out/size.genome ]; then
    # first get chromosome sizes from the reference
    echo "Getting chromsome sizes"
    samtools faidx ${genome} || { >&2 echo 'Reference genome indexing failed failed' ; exit 1; }
    cut -f1,2 ${genome}.fai > wrath_out/size.genome || { >&2 echo 'Getting chromosome sizes from genome file failed' ; exit 1; }
  fi

  #then make windows
  echo "Getting ${chromosome} size from genome file"
  awk -v pat="${chromosome}" '$1 == pat {print $0}' wrath_out/size.genome > wrath_out/size.${chromosome} || 
  { >&2 echo "Getting ${chromosome} size from genome file failed" ; exit 1; }

  #check if start and end positions are given
  if [ ! -z ${start+x} ] && [ ! -z ${end+x} ]; then
    echo "Start and end positions to subset windows are given"
    echo "Start: ${start}"
    echo "End: ${end}"
    echo "Making ${winSize} windows of ${chromosome} from ${start} to ${end}"
    bedtools makewindows -g wrath_out/size.${chromosome} -w ${winSize} >  wrath_out/beds/windows_${winSize}_${chromosome}.bed || 
    { >&2 echo "Making ${winSize} windows of ${chromosome} failed" ; exit 1; } #need to split the bed file in multiple beds one per chr

    awk -v a="$start" -v b="$end" '$2>a && $3<b {print $0}' wrath_out/beds/windows_${winSize}_${chromosome}.bed > wrath_out/beds/windows_${winSize}_${chromosome}_${start}_${end}.bed
    rm wrath_out/beds/windows_${winSize}_${chromosome}.bed
    
  else
    echo "Start and end positions to subset windows are not given"
    start=1
    end=$(cat wrath_out/size.${chromosome} | awk '{print $2}')
    echo "Making ${winSize} windows of ${chromosome} from ${start} to ${end}"
    bedtools makewindows -g wrath_out/size.${chromosome} -w ${winSize} >  wrath_out/beds/windows_${winSize}_${chromosome}_${start}_${end}.bed || { >&2 echo "Making ${winSize} windows of ${chromosome} failed" ; exit 1; } #need to split the bed file in multiple beds one per chr
  fi


  rm wrath_out/size.${chromosome}
  
  getbarcodes==1

fi


######################################################################
# Get barcodes

if [ -z ${step+x} ] || [ ! -z ${getbarcodes+x} ]; then

  #get barcodes by phenotype
  for sample in $(cat ${group})
    do
    echo "Getting ${sample} barcodes from ${chromosome}"
    samtools view -q 20 -@ ${threads} ${sample} ${chromosome}:${start}-${end} |
    grep -o -P "${chromosome}.*BX:Z:.*?\t" |
    awk -F'\t' '{
        if ($2 < $6) {
            print $1"\t"$2"\t"$6"\t"$NF
        } else {
            print $1"\t"$6"\t"$2"\t"$NF
        }
    }' > wrath_out/beds/barcodes_${chromosome}_$(basename "$group" .txt)_$(basename $sample .bam).bed
  done || { >&2 echo "Getting ${sample} barcodes from ${chromosome} failed" ; exit 1; }

  #sort barcodes
  echo "Sorting of $(basename "$group" .txt) barcodes bed files from ${chromosome}"
  cat wrath_out/beds/barcodes_${chromosome}_$(basename "$group" .txt)_*bed | 
  bedtools sort -i - | 
  bgzip -@ ${threads} > wrath_out/beds/barcodes_${chromosome}_sorted_$(basename "$group" .txt).bed.gz && 
  tabix wrath_out/beds/barcodes_${chromosome}_sorted_$(basename "$group" .txt).bed.gz && 
  rm wrath_out/beds/barcodes_${chromosome}_$(basename "$group" .txt)_*bed || 
  { >&2 echo "Sorting of $(basename "$group" .txt) barcodes bed files from ${chromosome} failed" ; exit 1; }

  matrix==1

fi


######################################################################
# Generate similarity matrix

if [ -z ${step+x} ] || [ ! -z ${matrix+x} ]; then

  mkdir -p wrath_out/matrices
  # compute the jaccard index and save it in a matrix
  echo "Computing of jaccard index matrix for chromsome ${chromosome} of $(basename "$group" .txt) of window size ${winSize}"
  python ${DIR}/big_svs/jaccard_matrix_simplequeue.py  --threads ${threads} -w wrath_out/beds/windows_${winSize}_${chromosome}_${start}_${end}.bed -b wrath_out/beds/barcodes_${chromosome}_sorted_$(basename "$group" .txt).bed.gz  -o wrath_out/matrices/jaccard_matrix_${winSize}_${chromosome}_$(basename "$group" .txt).txt ${verbose} || 
  { >&2 echo  "Computing of jaccard index matrix for chromsome ${chromosome} of $(basename "$group" .txt) of window size ${winSize} failed" ; exit 1; }

  #edit the output (remove a colon at the end of the line)
  echo "Editing of jacard index matrix for chromsome ${chromosome} of $(basename "$group" .txt) of window size ${winSize}"
  sed -i 's/,$//' wrath_out/matrices/jaccard_matrix_${winSize}_${chromosome}_$(basename "$group" .txt).txt || 
  { >&2 echo "Editing of jacard index matrix for chromsome ${chromosome} of $(basename "$group" .txt) of window size ${winSize} failed" ; exit 1; }
  plot==1
  outliersStep==1

fi


######################################################################
# Plot results without automatic detection of SVs

#if the option is given to plot it, then do
if [ -z ${step+x} ] || [ -z ${plot+x} ] || [ -z ${autodetect+x} ] || [ ! -z ${noplot+x} ]; then # -z asks if ${plot+x} is empty. Thus, [ ! -z ${plot+x} ] asks if ${plot+x} is not empty

  #plot the optput
  mkdir -p wrath_out/plots
  python ${DIR}/big_svs/plot_heatmap.py --matrix wrath_out/matrices/jaccard_matrix_${winSize}_${chromosome}_$(basename "$group" .txt).txt -o wrath_out/plots/heatmap_${winSize}_${chromosome}_$(basename "$group" .txt).png || { >&2 "Plotting of matrix wrath_out/matrices/jaccard_matrix_${winSize}_${chromosome}_$(basename "$group" .txt).txt step failed"; exit 1; }

fi


######################################################################
# Detect outliers

if [ -z ${step+x} ]  || [ ! -z ${outliersStep+x} ] && [ ! -z ${autodetect+x} ] ; then

  echo "Detecting outliers"
  mkdir -p wrath_out/outliers
  Rscript ${DIR}/big_svs/outlier_detection.R wrath_out/matrices/jaccard_matrix_${winSize}_${chromosome}_$(basename "$group" .txt).txt wrath_out/outliers/outliers_${winSize}_${chromosome}_$(basename "$group" .txt) || { >&2 "Detecting outliers from matrix wrath_out/matrices/jaccard_matrix_${winSize}_${chromosome}_$(basename "$group" .txt).txt step failed"; exit 1; }

fi


######################################################################
# Detect SVs and plot results

#if the option is given to plot it, then do
if [ -z ${step+x} ] || [ ! -z ${outliersStep+x} ] && [ -z ${noplot+x} ] && [ ! -z ${autodetect+x} ]; then # -z asks if ${plot+x} is empty. Thus, [ ! -z ${plot+x} ] asks if ${plot+x} is not empty

  #plot the optput
  mkdir -p wrath_out/plots
  mkdir -p wrath_out/SVs
  python ${DIR}/big_svs/sv_detection_and_heatmap.py --matrix wrath_out/matrices/jaccard_matrix_${winSize}_${chromosome}_$(basename "$group" .txt).txt -o wrath_out/outliers/outliers_${winSize}_${chromosome}_$(basename "$group" .txt).csv  -p wrath_out/plots/heatmap_${winSize}_${chromosome}_$(basename "$group" .txt).png -s wrath_out/SVs/sv_${winSize}_${chromosome}_$(basename "$group" .txt).txt -w ${winSize} -c ${chromosome} || { >&2 "Detecting SVs and plotting of matrix wrath_out/matrices/jaccard_matrix_${winSize}_${chromosome}_$(basename "$group" .txt).txt step failed"; exit 1; }

fi


######################################################################
# Detect SVs without plotting the results

#if the option is given to plot it, then do
if [ -z ${step+x} ] || [ ! -z ${outliersStep+x} ] && [ ! -z ${noplot+x} ] && [ ! -z ${autodetect+x} ]; then # -z asks if ${plot+x} is empty. Thus, [ ! -z ${plot+x} ] asks if ${plot+x} is not empty

  #plot the optput
  mkdir -p wrath_out/SVs
  python ${DIR}/big_svs/sv_detection.py --matrix wrath_out/matrices/jaccard_matrix_${winSize}_${chromosome}_$(basename "$group" .txt).txt -o wrath_out/outliers/outliers_${winSize}_${chromosome}_$(basename "$group" .txt).csv -s wrath_out/SVs/sv_${winSize}_${chromosome}_$(basename "$group" .txt).txt -w ${winSize} || { >&2 "Detecting SVs in matrix wrath_out/matrices/jaccard_matrix_${winSize}_${chromosome}_$(basename "$group" .txt).txt step failed"; exit 1; }

fi
